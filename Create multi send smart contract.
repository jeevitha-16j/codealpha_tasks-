pragma solidity ^0.8.20;
contract EtherSplitter {
 event EtherDistributed (address indexed sender, uint totalAmount, uint recipients);
 event TransferSuccess (address recipient, uint amount);
  event TransferFailed (address recipient, uint amount);

 // Payable function to split Ether among recipients
 function splitEther (address[] calldata recipients) external payable {
   uint totalRecipients=recipients.length;
 require(totalRecipients > 0, No recipients");
 require(msg.value > 0, No Ether sent");
uint amount Per Recipient = msg.value / totalRecipients;

require (amount Per Recipient > 0"Amount too small");

for (uint i = 0; i <totalRecipients; i++) {

// Using call t

o send Ether with success/fail check

(bool sent, ) = payable (recipients[i]).call {value: amount Per Recipient}("");
if (sent) {
emit Transfer Success(recipients[i], amountPerRecipient);
} else {
emit Transfer Failed(recipients[i], amountPerRecipient);
}
}
emit EtherDistributed(msg.sender, msg.value, totalRecipients);
 }

}
